//!                              ========           ВОПРОСЫ ДЛЯ СОБЕСЕДОВАНИЯ от WEBDEV        ========
//                                          https://github.com/YauhenKavalchuk/interview-questions



{/*//!          ====    HTML (вопросы по языку гипертекстовой разметки)   ====

== 1 Что такое HTML и для чего он используется?

    Язык гипертекстовой разметки - позволяет составлять форматированный текст, который интерпретируется браузером
        после чего отображается на екране в виде элементов веб страницы. Основная задача html помочь браузеру
        правильно отобразить информацию и сказать какого типа информация используется на странице.

== 2 Какие глобальные атрибуты есть в HTML?

    Есть категории аттрибутов которые можно применять практически к любому тегу

        class   - с помощью него можно осуществлять поиск или стилизацию элемента, в качестве значения
                принимает строку. Может быть задан абсолютно любому тегу.

        contenteditable - делает любой эл. на странице редактируемым(значение -true/false)

        data    - группа аттрибутов позволяющая перекидывать данные между хтмл и DOM часто используется для 
                взаимодействия с хтмл при помощи JS

        hidden  - не требует явного указания значения, наличие его у эл. уже означает состояние true. Делает
                эл. невидимым даже для скринридера.

        spellcheck  - с помощью него для элемента которому он задан нужно проверить правописание.

        tabindex    - указывает браузеру нужно ли видеть этот элемент при навигации по странице с помощью клавиатуры


== 3 Что такое категории контента в HTML5?

    Каждый эл. в хтмл принадлежит к некоторому количеству категорий контента которые объединяют эл-ты с общим набором
        х-к. Эта группировка является свободной и не задает отношения между элементами таких типов, а помогает определить
        и описать их поведение и правила которым они должны следовать особенно когда дело доходит до сложных деталей.

        Возможна ситуация когда эл. не входит ни в одну из этих категорий.

        Есть 3 основных вида категорий контента: 
        - основные кат. конт - описывающие общие для многих элементов правила
        - кат. конт. для эл. форм  - описывают общ. правила для эл. форм
        - особая кат. - описывает редкие кат контента, актуальные только для нескольких эл-в

                                        FLOW
            interactive + Phrasing                  Heading
                        +Embedded
            Metadata  +                             Sectioneng


== 4 Какие категории считаются основными категориями контента?

    Основные:
        - Метаданные    - эл. метаданных(изменяют отображение или поведение хтмл документа, связывают его с другими документами
                        и представляют другую дополнительную информацию)

        - Потоковый контент - эл. основного потока которые обычно содержат текст и встроенный контент

        - Секционный контент    - эл. создают глобальные секции в текущей структуре документа определяют область действия 
                                заголовочного контента и элементов header и footer 

        - Заголовочный контент  - определяет заголовок секции явно отмеченный структурным элементом или неявно самим заголовочным
                                эл-м

        - Фразовый контент      - определяет текст и его формат. Серии фразового контента образуют параграфы.

        - Встроенный контент    - импортирует в документ другой ресурс или вставляет содержимое на другом языке разметки или 
                                    принадлежащий другому пространству имен

        - Интерактивный контент - эл. специально разработанные для взаимодействия с пользователем

        - Явный контент     - контент который считается явным когда он не скрыт и не является пустым, он непосредственно отображен
                            на странице. У эл. потокового или фразового контента должен быть хотя-бы 1 явный узел

        - Контент форм      - эл. владельцем которых обычно является форма или тег form 


== 5 Что такое doctype? И для чего он используется?

    Используется для указания типа документа. Добавляется первой строкой любого html или xhtml документа, для того
        чтобы браузер мог понять как ему интерпретировать страницу и в соответствии с каким стандартом осуществлять
        парсинг документа, исходя из этого он будет считать какие теги считаются валидными, а какие устаревшими.


== 6 Опишите базовую структуру HTML-страницы?

    Первой строчкой обязательно Doctype. 
    Далее основной тег html - корневая обертка страницы, внутри себя он содержит два основных тега head и body. 
    Head(своеобразный вспомогательный тег который содержит все необходимые данные о    html документе: заголовок, 
    описание, сео информация, подключение стилей/шрифтов, мета информация) - данные внутри этого тега не отрисовываются 
    на странице.
    Body - тег которые содержит всю разметку html документа, она и отображается в браузере.


== 7 Что такое валидация? И какие типы проверок HTML документа вы знаете?

    validation - это проверка документа специальной программой валидатора на соответствие установленным web стандартом и
                обнаружение существующих ошибок. Эти стандарты называются спецификациями разработаны они консорциумом world
                wide web или сокращенно w3c а работа валидатора заключается в следующем сначала определяется тип документа 
                который указывается с помощью док type затем проверяется html код на правильность и отсутствие ошибок при
                этом также проверяется правильность использование имен тегов и их вложенности. Основные четыре типа проверки:
                - проверка синтаксиса
                - вложенности тегов 
                - dtd (document type definition)
                - на наличие посторонних элементов или тегов какой так


== 8 Основные этапы проверок валидности HTML-документа?

== 9 Если представить HTML5 как открытую веб-платформу, из каких блоков он состоит?

== 10 Какой тэг использовать для того, что бы сверстать кнопку?

    Cамый правильный ответ на него это тоже вопрос а какую именно кнопку нужно сделать и уже здесь вы получаете либо уточнение
        контекста либо вас попросят рассказать все варианты:
        1) это обычная кнопка функциональность которой может быть добавлено через java script верстается она тегом button иногда
            с атрибутом type button  <button>Button</button>

        2) кнопка подтверждение формы в этом случае используется либо button submit либо inputs submit
            <button type='submit'>Button</button>
            <input type='submit' value='button'>

        3) использование тега input с атрибутом type батон это немного устаревающий но по-прежнему актуальный кейс
            <input type='button'>

        4) кнопка ссылка здесь нам уже нужно использовать тег <a> и стилизировать полученную ссылку под кнопку с помощью
            ксс стилей: <a href="#">Button</a>


== 11 Что такое инлайновый стиль? Можно ли его переопределить?

    Стиль примененный к определенному элементу указывается он непосредственно в html файле а добавляется на тег с помощью атрибута
        style с указанием требуемых стилей. Переопределить его можно только с помощью директивы !important  которую можно
        добавлять на css свойства 

        <h1 style="color: red;">Heading</h1>

        <style>
            h1 {
                color: green !important;
            }
        <style>


== 12 Есть ли у HTML элементов свои дефолтные специфичные стили?

== 13 Что такое семантика? Какие семантичные тэги вы знаете?

== 14 Как семантически правильно сверстать картинку с подписью?

== 15 Типы списков в HTML?

== 16 Для какого тэга используется атрибут alt и зачем он нужен?

== 17 Какая разница между тэгами <strong><em> и <b><i>?

== 19 Типы <input> элементов в HTML?

== 20 Для чего используют data-атрибуты?

== 21 Разница между <script>, <script async> и <script defer>?

== 22 Для чего используется элемент <datalist>?

== 23 Почему хорошей практикой считается располагать <link> для подключения CSS стилей внутри тэга <head>, а <script> для подключения JS ставить перед закрывающимся тэгом </body>?

== 24 Что такое мета-тэги?

== 25 Что описывается в тэге <head>?

== 26 Для чего используются тэги <tr>, <th>, <td>?

== 27 Расскажите о meta-теге с name="viewport"?

== 28 Что такое элемент <canvas>? И для чего он используется?

== 29 Что такое <svg> и <canvas>?

== 30 Разница между <canvas> и <svg>?

== 31 В каких случаях лучше использовать <canvas>s, а в каких <svg>?

== 32 Плюсы и минусы <canvas> и <svg>?

== 33 Для чего нужен атрибут autocomplete?

== 34 Что такое элемент <output> в HTML5?

== 35 Что такое свойство valueAsNumber?

== 36 Что такое атрибут target? Какие значения он принимает?

== 37 Что такое ApplicationCache в HTML5?

== 38 Для чего используется элемент <picture>?

== 39 Что такое srcset? Как работает srcset?

== 40 Как семантически верно сверстать навигационное меню?

== 41 Что такое <iframe>?

== 42 Для чего используются тэги <sub> и <sup>?

== 43 Как можно скрыть элемент разметки не используя CSS и JS?

== 44 Разница между <meter> и <progress>?

== 45 Как можно сгруппировать опции внутри тэга <select>?

== 46 Что такое скринридер?

== 47 Как можно изменить форму картинки или HTML элемента?

== 48 Чем отличается <article> от <section>?

== 49 Расскажите об особенностях стилизации <svg>?

== 50 Что такое ARIA роли в веб приложении?

== 51 Разница между кнопкой и ссылкой в HTML?

== 52 Для чего используется атрибут decoding?

== 53 Для чего используется атрибут enterkeyhint?

== 54 Для чего используют атрибут novalidate?

== 55 Для чего используют атрибут inputmode?

== 56 Для чего используется атрибут pattern?

== 57 Почему стоит использовать семантические теги в верстке?

== 58 Для чего используется тэг <label>?


*/}


{/*//!          ====    CSS (вопросы по каскадным таблицам стилей)   ====

== 1 Что такое CSS? И для чего он используется?

    Каскадные таблицы стилей. Предназначены для добавления различных стилей(визуальных эффектов) на хтмл страницу.


== 2 Что такое CSS-правило?(базовый ксс синтаксис)

        selector      declaration
            p       { color:  blue; }
                    property  value

        selector - правило по которому на странице будет выбран элемент для стилизации
        declaration - блок объявления: фигурные скобки в которых описываются свойства и их значения


== 3 Варианты добавление CSS стилей на страницу?

    4 способа:
        - инлайновые стили
        - глобальные стили, в head добавляется тег style в котором пишеться сам ксс
        - внешний файл в head добавляется тег <link rel='styleshit' href='путь к файлу/styles.css'>
        - импорт в файле ксс другого файл ксс


== 4 Типы позиционирования в CSS?

    *static - значение по умолчанию. Каждый элемент расположен с естественным порядком добаления его на страницу.
                  Элементы блоков располагаются под элементами блоков, а линейные(строковые) - один за другим. По умолчанию или при
                  записи position: static; попытавшись сместить блок вниз top: 50px; - ничего не выйдет, он останется на месте
                  потому что не спозиционирован.

                  .block:first-child{
                        background-color: rgb(18, 230, 18);
                        position: static;
                        top: 50px;
                        }

    *relative - относительное позиционирование. Эти элементы располагаются относительно своей позиции. Сдвиг производится 
                относительно его изначального положения. При сдвиге блока на его месте остается образ относительно которого все 
                элементы располагаются и накладываются один на другой. Элементы с relative выходят из общего потока, но ведут 
                себя так как будто в нем находятся. 
                position: relative;

                При таком позиц. первый квадрат сместится вниз и закроет половину второго квадрата, но второй останется на
                месте так как будто первый находится на своем месте. Если второму прописать position: relative; то он выйдет
                на первый план.

    *absolute - вырывает блок из общего потока(структуры) документа. Точка отсчета - эти элементы располагаются
                относительно ближайшего родительского элемента с позиционирование отличным от static(***НЕ static).
                Если такого родительского эл. нету - позиционирование производится относительно основного документа, тоесть
                элемента body (окна браузера?). ***Для того что бы абсолютное поз. работало, нужно дочернему эл. прописать absolute, 
                а родительскому relative.

                При таком поз. на втором квадрате он вырвался из общего позиционирования и стал позиционироваться относительно
                страницы, а третий квадрат поднялся на его место.

    *fixed - фиксированное. Всегда игнорирует родительские элементы и располагается относительно окна браузера(ВЫРЫВАЕТСЯ из
                общего потока).Во время просмотра страницы элемент не смещается. Применяется для создания вкладок, меню, 
                заголовков, ... элементов которые должны бытьпостоянно видны пользователю и оторые он не может проскролить.
                position: fixed;

                Пример - блок в самом верху и дальше много текста чтобы был скролл. Блок остаетс на своем месте ВСЕГДА при скроле
                страницы.

    *sticky - НЕ ВЫРЫВАЕТСЯ из общего контекста, работает как relative, но при скроле ведет себя также как fixed в пределах
                своего родителя. Так как он в теге <div class="container"> он доезжает со скролом до конца своего блока обертки
                и остается там.

    *inherit - дочерний элемент наследует позишн от родительского.


== 5 Блочная модель CSS?

    Блочная модель позволяет рассчитать какое итоговое пространство будет занимать эл. на странице.
        По умолчанию - content-box. В размер элемента входит margin + border + padding + content 
        Для того чтобы размер content был именно указанный размер нужно указать box-sizing:border-box

        .content-box {
        box-sizing: content-box;
        Total width: 160px + (2 * 20px) + (2 * 8px) = 216px
            Total height: 80px + (2 * 20px) + (2 * 8px) = 136px
            Content box width: 160px
            Content box height: 80px 
        }

        .border-box {
        box-sizing: border-box;
        Total width: 160px
            Total height: 80px
            Content box width: 160px - (2 * 20px) - (2 * 8px) = 104px
            Content box height: 80px - (2 * 20px) - (2 * 8px) = 24px 
        }


== 6 Что такое селектор? И какие селекторы существуют?

    Селектор - часть ксс правила которая сообщает браузеру к какому эл-ту или э-м веб страницы будет применен
        стиль. Делятся на 2 группы:

        Простые:
            .class {}
            #id {}
            p {}    - тег
            * {}    - универсальный селектор
            a[href="test"] {}   - селектор аттрибута

        Составные - комбинация простых разделенных или пробелом или комбинатором:
            h1, h2, span {} - групповые
            div p {}    - селектор потомка 
            li > a {}   - селектор только дочернего эл.
            a:hover {}  - селектор псевдокласса
            li:nth-last-child(2n) {}    - псевдоэлемента


== 7 Что такое специфичность селектора? Как считать вес селектора?

    Специфичность - способ которым браузер определяет какие значения ксс свойств будут применены к эл.
                    если на одном эл. определено сразу несколько стилей. Базируется на определении
                    веса селектора.

                        inline      = 1000
                        id          = 100
        class/attribut/pseudo-class = 10
        element/pseudo-element      = 1

        Для подсчета веса нужно просуммировать входящие в него элементы:
        li          = 1
        ul li       = 1 + 1 = 2
        #main .item = 100 + 10 = 110


== 8 Разница между Reset.css и Normalize.css?

    практически все html элементы обладают дефолтными стилями: это внутренние и внешние отступы, размер, жирность шрифта, наличие меток
        и так далее. Нюанс заключается в том что каждый браузер применяют различные стили и для  того чтобы верстка в каждом выглядела
        одинаково прежде чем начать ее делать использют два подхода это reset и normalize, по сути это css-файл который подключаются в 
        самом начале документа и либо сбрасывает все дефолтные стиле в ноль либо нормализирует стабилизирует их для различных браузеров 
        то есть сохраняя дефолтные стили делает их одинаковыми. Недостатком сброса(reset) стилей является то что частично их придется 
        устанавливать заново. Выбирать между двумя инструментами стоит в зависимости от поставленной задачи, однако наиболее актуальный 
        вариант сейчас это применение normalize.


== 9 Разница между margin и padding?

    margin  - это внешний отступ то есть пространство от границы блока до другого элемента
    padding - это внутренний отступ или пространство от границы блока до контента

    Оба значения входят в так называемую блочную модель которая помогает определить финальный размер блока на странице


== 10 Разница между display: none и visibility: hidden?

    Оба правила предназначены для того чтобы скрывать элемент на странице но вот механизмы которой они используют отличаются. Свойство дисплей
        display: none полностью убирает элемент с html страницы, элемент действительно удаляется из основного потока документа единственное 
        место где он остается доступен это дом дерево также контент находящиеся внутри него становится недоступен для поисковых роботов.

        если же говорить о правиле visibility: hidden несмотря на то что на html странице элемент не виден из основного потока он не вырывается 
        и по-прежнему занимает отведенное для него место, а также он остается доступен для поисковых роботов.


== 11 Разница между блочным и строчным (инлайновым) элементами?

    основная разница между блочными и строчными элементами  заключается в том что блочный элемент по умолчанию всегда будет занимать всю доступную
        ширину экрана, а строчный элемент подстраивается под размер контента, поэтому блочные всегда идут друг под другом а строчных в одном ряду 
        может быть несколько. 
        
        Блочным элементом можно задавать размеры то есть ширину и высоту, для строчных это не работает. Блочные элементы воспринимают внешние и 
        внутренние отступы то есть margin и padding для строчных элементов margin сверху и снизу не работает.


== 12 Разница между классом и идентификатором в CSS?

    если рассмотреть разницу между классом и айди с точки зрения css и стилизации то она очень значительна. есть негласное правило для добавления стилей
        лучше всего использовать класс а вот для добавления логики через java script оптимальнее применять id. 
        
        правило связано с особенностью каждого селектора: 
        - айди с определенным значением должен быть уникальным и встречаться на странице только один раз в то время как класс можно задавать и использовать
            много раз 
        - айди у элемента должен быть только один противоположность класс их можно определять на элементе в любом количестве и в любой последовательности и 
            комбинации
 
        Если сравнивать специфичность то id она равна 100 а это значит что чтобы переопределить стили заданные через id нужно использовать очень длинную цепочку
        селекторов что не очень удобно поэтому класс для css айди для java script.


== 13 Что такое CSS спрайт? И для чего он используется?

    css sprites - картинка которая объединяет несколько изображений в одно большое обычно такой подход используется для специфичных наборов иконок в первую очередь
        это сокращает количество обращений к серверу так как вместо нескольких запросов достаточно сделать только один, дополнительно это выполнение предзагрузки пока
        невидимого контента то есть иконка которая отображается по наведению будет загружено заранее в результате не будет видно мигания при смене картинок.


== 14 Что такое вендорные префиксы? И для чего они используются?

    Это приставка к ксс свойству которая обеспечивает поддержку данного свойства браузерами в которых оно не внедрено на постоянной основе, тоесть свойство
        введено в спецификацию ксс, но в браузере оно находиться либо в стадии разработки либо в стадии тестирования. 
        
    Причин для их внедрения несколько:
        - введение в браузер экспериментальных свойств ксс которые стандартом еще не утверждены
        - решение проблем с кроссбраузерностью

    Посмотреть поддержку свойства ксс в разных браузерах можно на сайте "can i use"


== 15 Что такое псевдоэлементы? И для чего они используются?

    Это ключевое слово которое добавляется на селектор и позволяет стилизировать определенную часть выбранного эл.

    Виды псевдоэл.:
    - ::first-letter  - изменение первой буквы    h3::first-letter { color:red; }
    - ::first-line    - изменение первой строки блочного текста
    - ::before        - вставка нужного контента до выбранного эл.
    - ::after         - вставка нужного контента после выбранного эл.
    - ::selection     - позволяет применить стили к части докум. которая была выделена пользователем
    - ::cue           - Он может быть использован для задания стилей титров и других реплик в медиа с VTT треками. ::cue { color: #fff;}
    - ::slotted()     - представляет собой любой элемент, помещённый в слот внутри HTML-шаблона. Это работает только при использовании внутри CSS, 
                      помещённого в shadow DOM (en-US). Обратите также внимание, что этот селектор не будет выбирать текстовый узел, помещённый в слот;
                      он нацелен только на фактические элементы.

                      Выбирает только <span>, помещённый в слот
                        ::slotted(span) {
                            font-weight: bold;
                        }


== 16 Что такое схлопывание границ (margin collapsing)?

    Механизм взаимодействия отступов по вертикали. Такой эффект наблюдается у блочных эл. расположенных друг над другом когда их отступы не
        суммируются, а объединяются между собой, в результате итоговое расстояние равно наибольшему из марджинов.


== 17 Что такое CSS препроцессор?

    Программа которая геренирует ксс из собственного уникального синтаксиса, обычно этот синтаксис проще читать, поддерживать, переиспользовать и
        расширять. В нем есть такие фичи как: переменные, вложенность, миксины(примеси) - переиспользуемые куски кода, и т.д.


== 18 Что такое z-index? Как формируется контекст наложения?

    Любой эл. в хтмл документе может быть или на переднем или на заднем плане. Если свойства z-index и позиционирование незаданы явно то порядок 
        наложения равен порядку следования эл. в хтмл. Если задано, то такие эл. будут перекрывать собой эл. без явно заданных параметров. Чтобы
        задать z-index нужно явно указать позиционирование элементу, без этого не сработает.


== 19 Порядок наложения элементов в CSS (Stacking Order)?

    Эл. в хтмл имеют не плоскую, а объемную структуру поэтому они способны перекрывать друг друга, такое поведение регулируется с помощью свойства
    z-index. Но и при его отсутствии существует свой порядок наложения, начинается с самого низкого(под всеми остальными):
        backgroun/Borders   - бекграунд и бордеры эл.
        Negative z-index    - позиционированные эл. и их дети z-index меньше 0
        Block level boxes   - эл. блочного уровня в нормальном потоке position=static
        Floated boxes       - плавающие 
        Inline boxes        - инлайн эл.
        z-index = 0         - эл. z-index = 0 или auto  
        positive z-index    - эл. со свойством opacity меньше 1


== 20 Как с помощью CSS определить, поддерживается ли свойство в браузере?

    @supports (display: grid) {  - если срабатывает проверка(положительно) то выполняется код внутри
        .main {
            display: grid
        }
    }


== 21 Как поддерживать страницы в браузерах с ограниченными функциями?

    Речь идет о техниках которые используются чтобы добавлять фоллбеки для старых браузеров. Если современное свойство не поддерживается в каком-то
        из старых браузеров, как можно написать аналог. В основном ориентируется этот вопрос на наш опыт. 
        
        Некоторые подходы:
        - Обнаружение ф-ии с помощью библиотеки Modernizr
        - Использование ксс директивы @support
        - autoprefixer для автоматической вставки браузерных префиксов
        - Использование ресурса caniuse.com  для проверки поддержки
        - Применение подходов Graceful degradation или Progressive enhancement


== 22 Как исправлять специфичные проблемы со стилями для разных браузеров?


== 23 Глобальные ключевые слова в CSS?

    Для всех свойств ксс помимо стандартных значений можно задать значения в виде ключевых слов:
    - initial   - для кждого из свойств ксс есть значение по умолчанию оно применяется еще до того как что-либо написано в файле стилей, 
                  ключевое слово initial сбрасывает все указанные значения свойства для конкретного блока до значений по умолчанию.
    - inherit   - ксс свойства деляться на наследуемые и не наследуемые, значения наследуемых свойств применяются не только к эл. для 
                  которого прописаны но и для всех вложенных дочерних эл. это удобно чтобы не писать много одинаковых свойств для разных 
                  селекторов перечисляя всех потомков.
    - unset     - с наследуемыми свойствами ведет себя как inherit, а с ненаследуемыми как initial.
    - revert    - сбрасывает значение свойства до указанного в стилях браузера.


== 24 Что такое CSS-атрибут (attr)?

    Ф-я attr - абревиатура от аттрибут это ксс ф-я которая умеет получать значение любого аттрибута эл., а потом использовать это значение
        прямо в ксс. Ф-я работает и псевдоэлементами в этом случае возвращается значение атрибута элемента для которого формируется псевдоэл.
        attr можно использовать с любым свойством ксс, но поддержка других свойств кроме content является экспериментальной.

        <div class='element' title='No text inside'></div>

        div::before {
            content: "элемент с классом " attr(class);
        }

        div::after {
            content: "Подсказка: " attr(title);
        }


== 25 Что такое перечисление селекторов?

    Перечисление селекторов через запятую, чтобы к ним всем применились слудующие значения свойств. Таким образом можно избежать дублирования
        кода.

        h1, h2, h3 {
            margin: 0;
        }


== 26 Для чего используется ключевое слово currentColor в CSS?

== 27 Какие псевдоклассы были добавлены в CSS3?

    Виды псевдоклассов:
    :active
    :any (en-US)
    :any-link
    :checked
    :default
    :defined
    :dir()
    :disabled
    :empty
    :enabled
    :first
    :first-child
    :first-of-type      - выбирает первый эл. заданного типа внутри род. эл.
    :fullscreen
    :focus
    :hover
    :indeterminate
    :in-range
    :invalid
    :lang()
    :last-child         - выбирает последний дочерний эл.
    :last-of-type       - последнй эл. заданного типа внутри род. эл.
    :left
    :link
    :not()
    :nth-child()        - находит энный дочерний эл. внутри родительского. Метка n может принимать определенные значения или ф-и
    :nth-last-child()   - тоже самое что предыдущий но выбирает с конца
    :nth-last-of-type()
    :nth-of-type()      - выбирает эл. энного типа внутри родительского эл. Метка n может принимать определенные значения или ф-и
    :only-child         - выбирает эл. если он является единственным доч. эл.
    :only-of-type
    :optional
    :out-of-range
    :read-only
    :read-write
    :required
    :right
    :root
    :scope (en-US)
    :target
    :valid
    :visited


== 28 Какие фильтры есть в CSS?

== 29 Для чего используется псевдокласс :invalid?

== 30 Расскажите про свойство display в CSS?

== 31 В каком случае лучше использовать translate() вместо абсолютного позиционирования?

== 32 Что такое плавающие элементы (floats)? Как они работают?


//!Premium content of channel
== 33 Расскажите о свойстве text-rendering?

== 34 Расскажите о свойстве text-decoration-skip-ink?

== 35 Расскажите о свойстве pointer-events?

== 36 Почему не стоит использовать краткую запись свойств CSS?

== 37 Расскажите о свойстве outline?

== 38 Назовите псевдоэлементы для подсветки текста?


*/}


{/*//!          ====    JavaScript (вопросы по языку JavaScript)   ====

== 1 Типы данных в JavaScript?

== 2 Разница между == и === (нестрогое/строгое равенство)?

== 3 Что такое Strict mode в JavaScript?

== 4 Разница между function declaration и function expression?

== 5 Разница между null и undefined?

== 6 Типы таймеров в JavaScript?

== 7 Что такое поднятие (Hoisting)?

== 8 Что такое область видимости (Scope)?

== 9 Разница между var, let и const?

== 10 Что такое замыкание (Closure)?

== 11 Что обозначает this в JavaScript?

== 12 Что такое функции высшего порядка (Higher Order Functions)?

== 13 Как превратить любой тип данных в булевый? Перечислите ложные значения в JS?

== 14 Методы строк в JavaScript?

== 15 Методы массивов в JavaScript?

== 16 Что такое чистая функция?

== 17 Разница между .forEach() и .map()?

== 18 Разница между .call(), .apply() и bind()?

== 19 Почему в JS функции называют объектами первого класса?

== 20 Как определить наличие свойства в объекте?

== 21 Что такое IIFE?

== 22 Что такое псевдомассив arguments?

== 23 Разница между host-объектами и нативными объектами?

== 24 Почему результат сравнения 2х объектов это false?

== 25 Что такое прототипное наследование? Как создать объект без прототипа?

== 26 Почему расширение нативных JavaScript-объектов это плохая практика?

== 27 Что такое NaN? Как определить, что значение равно NaN?

== 28 Что такое объектная обертка (Wrapper Objects)?

== 29 Как в JavaScript создать объект?

== 30 Для чего используется ключевое слово new?

== 31 Операторы «И» и «ИЛИ» (&& и ||)?

== 32 Для чего используется оператор двойного отрицания (!!)?

== 33 Для чего используется оператор остатка (%)?

== 34 Как проверить, является ли значение массивом?

== 35 Как работает boxing/unboxing в JavaScript?

== 36 Что такое мемоизация? Реализуйте базовую логику функции для мемоизации?

== 37 Разница между оператором in и методом .hasOwnProperty()?

== 38 Разница между глубокой (deep) и поверхностной (shallow) копиями объекта? Как сделать каждую из них?

== 39 Что такое цепочка вызовов функций (chaining)? Как реализовать такой подход?

== 40 Что такое необъявленная переменная?

== 41 Как передаются параметры в функцию: по ссылке или по значению?

== 42 Что такое прототип объекта в JavaScript?

== 43 Как работает метод Object.create()?

== 44 Разниц между Object.freeze() и Object.seal()?

== 45 Разница между методами .slice() и .splice()?

== 46 Как работают методы .find(), .findIndex() и .indexOf()?

== 47 Плюсы и минусы использования use strict?

== 48 Разница между методами .push(), .pop(), .shift() и .unshift()?

== 49 Плюсы и минусы иммутабельности? Как достичь иммутабельности в JS?

== 50 Типы всплывающих окон в JavaScript?

== 51 Типы объектов JavaScript?

== 52 Парадигмы программирования в JavaScript?

== 53 Типы ошибок в JavaScript?

== 54 Разница между typeof и instanceof?

== 55 JavaScript статически, или динамически типизированный язык?

== 56 Что такое регулярное выражение (Regular Expression)?

== 57 Что такое рекурсия?

== 58 Что такое прототип (Prototype) объекта?

== 59 Какие методы используются в регулярных выражениях?

== 60 Что такое полифил (polyfill)?

== 61 Что такое switch/case? Правила использования switch/case?

== 62 Типы функций по способности принимать другие функции?

== 63 Что такое выражения (expression) и инструкции (statement) в JavaScript?

== 64 Разница между .some() и .every()?

== 65 Как сгенерировать случайное число в JavaScript?

== 66 Типы операторов в JavaScript?

== 67 Разница между параметром и аргументом функции?

== 68 Правила задания имён для переменных и функций в JavaScript?

== 69 Разница между явным и неявным преобразованием (Implicit and Explicit Coercion)?

== 70 Для чего применяется метод Array.from()?

== 71 Назовите способы преобразования массива в объект?



//!Premium content of channel
== 72 Разница между Object и Map?

== 73 Что такое каррирование?

== 74 Для чего используются метод Object.seal()?

== 75 Для чего используется свойство .dataset?

== 76 Каким образом можно обмениваться кодом между файлами?

== 77 Как работает «сборщик мусора» в JavaScript?

== 78 Что такое утечки памяти?

== 79 Назовите основные типы утечек памяти в JavaScript?


*/}


{/*//!          ====    JS in Browser (вопросы из браузерного JavaScript)   ====

== 1 Что такое DOM?

== 2 Что такое распространение события (Event Propagation)?

== 3 Что такое делегирование событий (Event Delegation)?

== 4 Разница между e.preventDefault() и e.stopPropagation()?

== 5 Методы поиска элементов в DOM?

== 6 Разница между event.target и event.currentTarget?

== 7 Разница между .stopPropagation() и .stopImmediatePropagation()?

== 8 Разница между событиями load и DOMContentLoaded?

== 9 Разница между attribute и property у DOM-элементов?

== 10 Разница между HTMLCollection и NodeList?

== 11 Как динамически добавить элемент на HTML-страницу?

== 12 Типы узлов DOM-дерева?

== 13 Свойства для перемещения по DOM-дереву?

== 14 Виды событий в JavaScript?

== 15 Как добавить обработчик события на DOM-элемент?

== 16 Как удалить обработчик события с DOM-элемента?

== 17 Сколько аргументов принимает addEventListener?

== 18 Разница между innerHTML и outerHTML?

== 19 Расскажите про координаты в браузере?

== 20 Разница между JSON и XML?

== 21 Как узнать об использовании метода event.preventDefault()?

== 22 Для чего используется свойство window.navigator?

== 23 Для чего используется метод .focus()?

== 24 Для чего используется свойство .forms?

== 25 Для чего используется метод .scrollIntoView()?

== 26 Как использовать media выражения в JavaScript?

== 27 Разница между методами .submit() и .requestSubmit()?

*/}


{/*//!          ====    Async JS (вопросы из асинхронного JavaScript)   ====

== 1 Разница между синхронными и асинхронными функциями?

== 2 Что такое AJAX?

== 3 Что такое same-origin policy в контексте JavaScript?

== 4 Что такое цикл событий (event loop) и как он работает?

== 5 Что такое промисы (Promises)?

== 6 Плюсы и минусы использовании Ajax?

== 7 Подходы при работе с асинхронным кодом?

== 8 Преимущества использовании промисов вместо колбэков?

== 9 Что такое коллбэк-функция (Callback)? Что такое Callback Hell?

== 10 Что такое async/await?

== 11 Разница между Promise.all(), Promise.any() и Promise.race()?

== 12 Расскажите про статический метод .allSettled()?

*/}


{/*//!          ====    ECMAScript (вопросы из стандарта ECMAScript)   ====

== 1 Что такое ECMAScript? В чём отличие от JavaScript?

== 2 Разница между let, const и var?

== 3 Можно ли изменить значение определённое через const?

== 4 Что такое временная мёртвая зона (temporal dead zone)?

== 5 Разница между Rest и Spread операторами?

== 6 Что такое деструктуризация?

== 7 Для чего используется цикл for…of?

== 8 Что такое шаблонные литералы (Template Literals)?

== 9 Что такое Set, Map, WeakMap и WeakSet?

== 10 Разница между обычными функциями и стрелочными?

== 11 Разница между методом Object.freeze() и const?

== 12 Что такое итераторы?

== 13 Что такое генераторы? Когда стоит использовать генераторы?

== 14 Что такое ES6 модули?

== 15 Что такое символ (Symbol) в ES6?

== 16 Для чего используется метод .includes()?

== 17 Для чего используется метод .getOwnPropertyDescriptors()?

== 18 Расскажите о методах .keys(), .values(), .entries()?

== 19 Для чего используется метод .fromEntries()?

== 20 Для чего используются методы .flat() и .flatMap()?

== 21 Для чего используются методы .padStart() и .padEnd()?

== 22 Для чего используются методы .startsWith() и .endsWith()?

== 23 Как в JavaScript удалять пробельные символы в начале и в конце строки?

== 24 Расскажите об операторе Optional Chaining (?.)?

== 25 Для чего используется метод .replaceAll()?

== 26 Что такое оператор логического присваивания?

== 27 Как увеличить читаемость больших чисел?

== 28 Что такое приватные аксессоры?

== 29 Разница между ES6-классами и конструкторами функций?

== 30 Что такое оператор нулевого слияния (??)?

== 31 В чём отличие оператора нулевого слияния (??) и оператора “ИЛИ” (||)?

== 32 Назовите основные методы и свойства работы с коллекцией Map?

== 33 Назовите основные методы и свойства работы с коллекцией Set?

== 34 Как осуществить перебор элементов в коллекциях Map и Set?

*/}


{/*//!          ====    Web Technologies (общие вопросы по веб-разработке)   ====

== 1 Что такое прогрессивный рендеринг?

== 2 Что такое прогрессивный SSR?

== 3 Что такое поток документа?

== 4 Разница между адаптивным (adaptive) и отзывчивым (responsive) дизайнами?

    адаптивный дизайн это по сути несколько версий одного и того же сайта который загружается пользователю в зависимости от того на 
        каком устройстве открыт сайт.

    отзывчивый дизайн предполагает перестройку макета в зависимости от ширины экрана. 
    
    Другими словами в адаптивном сайте есть несколько html css и java script файлов одной страницы эти файлы загружаются основываясь на 
        устройстве пользователя, в отзывчивой responsive  версии сайта есть только один набор файлов однако внутри css с помощью например
        медиа запросов мы перестраиваем layout зависимости от разрешения экрана.


== 5 Разница между Progressive Enhancement и Graceful Degradation?

== 6 Что такое кроссбраузерность?

== 7 Что такое Babel? Для чего он используется?

== 8 Разница между feature detection, feature inference и анализом строки user-agent?

== 9 Что такое Веб-компоненты и какие технологии в них используются?

== 10 Способы уменьшения времени загрузки веб-страницы?

== 11 Особенности разработки мультиязычных сайтов?

== 12 Что такое Flash Of Unstyled Content (FOUC)? Как его избежать?

== 13 Разница между layout, painting и compositing?

== 14 Что такое Progressive Web Application?

== 15 Что такое межсайтовый скриптинг (XSS)?

== 16 Что Такое API?

== 17 Что такое CDN?

== 18 Что такое REST?

== 19 Что такое IP-адрес?

== 20 Разница между host и domain?

== 21 Разница между URI и URL?

== 22 Почему очищать кэш важно? Как это можно сделать?

== 23 Назовите критические этапы рендеринга?

*/}


{/*//!          ====    Web API (вопросы из веб API)   ====

== 1 Что такое HTTP?

== 2 Из чего состоит HTTP-запрос?

== 3 Какие методы может иметь HTTP-запрос?

== 4 Что такое HTTP cookie? Для чего они используются?

== 5 Что такое WebSocket? В чем принцип его работы?

== 6 Разница между HTTP и HTTPS?

== 7 Разница между Long-Polling, Websockets и Server-Sent Events?

== 8 Разница между PUT- и POST-запросами?

== 9 Что такое безопасные (Secure) и HttpOnly cookies?

== 10 Что такое Content Security Policy (CSP)?

== 11 Что такое CORS?

== 12 Разница между протоколами TCP и UDP?

== 13 Как работает JSONP?

== 14 Что такое IndexedDB в браузере? Преимущества IndexedDB?

== 15 Что такое Service Workers?

== 16 Что такое Web Workers?

== 17 Что такое History API в браузере?

== 18 Что такое веб-хранилище (web storage)?

== 19 Что такое BOM?

== 20 Разница между cookie, sessionStorage и localStorage?

*/}


{/*//!          ====    React (вопросы по библиотеке React)   ====

== 1 Что такое React?

== 2 Перечислите особенности React?

== 3 Что такое Virtual DOM? Как он работает с React?

== 4 Для чего нужен атрибут key при рендере списков?

== 5 Что такое PureComponent?

== 6 Что такое Компонент высшего порядка (Higher-Order Component/HOC)?

== 7 Разница между управляемыми (controlled) и не управляемыми (uncontrolled) компонентами?

== 8 Методы жизненного цикла компонента в React?

== 9 Стадии жизненного цикла компонента в React?

== 10 Что такое React Reconciliation?

== 11 Что такое портал (Portal)?

== 12 Что такое контекст (Context)?

== 13 Что такое React хуки (Hooks)?

== 14 Что Такое JSX?

== 15 Разница между состоянием(state) и пропсами(props)?

== 16 Что такое React Fiber?

== 17 Что такое фрагмент (Fragment)? Почему фрагмент лучше, чем div?

== 18 Что такое синтетические события в React?

== 19 Что такое React-ссылка (ref)? Как создать ссылку?

== 20 Разница между теневым (Shadow) и виртуальным (Virtual) DOM?

== 21 Назовите преимущества использования React?

== 22 Что такое условный рендеринг (Conditional Rendering)? Как его выполнить?

== 23 Что такое компонент-переключатель (Switching Component)?

== 24 Разница между React и ReactDOM?

== 25 Разница между компонентом и контейнером?

== 26 Как React обрабатывает, или ограничивает использование пропсов определенного типа?

== 27 Что такое строгий режим в React? Его преимущества?

== 28 Что такое «бурение пропсов» (Prop Drilling)? Как его избежать?

== 29 Что такое «опрос» (Polling)? Как его реализовать в React?

== 30 Разница между элементом и компонентом?

== 31 Что такое ReactDOMServer?

== 32 Что такое предохранители (Error Boundaries)?

== 33 Что такое «ленивая» (Lazy) функция?

== 34 Разница между рендерингом и монтированием?

== 35 Что такое сhildren?

== 36 Что такое события указателя (Pointer Events)?

== 37 Что такое инверсия наследования (Inheritance Inversion)?

== 38 Как в React реализовать двустороннее связывание данных?

== 39 Разница между классовым и функциональным компонентами?

== 40 Разница между useEffect() и componentDidMount()?

== 41 Преимущества хуков?

== 42 Правила (ограничения) использования хуков?

== 43 Что такое поднятие состояния вверх (Lifting State Up)?

== 44 Что делает метод shouldComponentUpdate?

== 45 Разница между createElement() и cloneElement()?

== 46 Что такое useReducer()?

== 47 Как реализовать однократное выполнение операции при начальном рендеринге?

== 48 Что такое распределенный компонент?

== 49 Расскажите о хуках useCallback(), useMemo(), useImperativeHandle(), useLayoutEffect()?

== 50 Как отрендерить HTML код в React-компоненте?

== 51 Зачем в setState() нужно передавать функцию?

== 52 Для чего предназначен метод registerServiceWorker() в React?

== 53 Чем React Router отличается от обычной маршрутизации?

== 54 Какие хуки были добавлены в React Router версии 5?

== 55 Как передавать пропсы в React Router?

== 56 Что такое Reselect и как он работает?



//!Premium content of channel
== 57 Назовите основную цель React Fiber?

== 58 Какие типы данных может возвращать render?

== 59 Разница между memo и useMemo?

== 60 Что такое синтетические события (SyntheticEvent) в React?

== 61 Является ли React реактивным?


*/}


{/*//!          ====    State management (вопросы по менеджменту состояния   ====

== 1 Что такое Flux?

== 2 Что такое Redux? Ключевые принципы Redux?

== 3 Разница между Redux и Flux?

== 4 Ключевые концепции Redux?

== 5 Что такое «единственный источник истины» (Single Source of Truth)?

== 6 Что такое редьюсер (Reducer)?

== 7 Разница между React State и Redux State?

== 8 Как выглядит поток данных в Redux-приложении?

== 9 Плюсы и минусы Redux?

*/}





{/*//!          ====    OOP & FP (вопросы из объектно-ориентированного и функционального программирования)   ====

== 1 Основные принципы ООП?

== 2 Что такое SOLID?

== 3 Разница между классовым и прототипным наследованием?

== 4 Однонаправленный поток данных и двусторонняя связь данных? В чем между ними разница?

== 5 Что такое функциональное программирование?

== 6 Что такое MVC?

== 7 Что такое MVVM?

== 8 Что такое MVP?

== 9 Недостатки паттерна MVW?

== 10 Разница между функцией и методом?

== 11 Что такое каррирование (Currying)?

== 12 Плюсы и минусы ФП и ООП?

== 13 Разница между монолитной и микросервисной архитектурами?

== 14 Плюсы и минусы монолитной и микросервисной архитектур?

== 15 Какие принципы можно использовать вместе с наследованием?

== 16 Какие ещё принципы кроме SOLID вы знаете?

== 17 Что такое дескрипторы свойств объектов?

== 18 В чем заключаются особенности геттеров и сеттеров?

== 19 Что такое статический метод класса (static)? Как осуществляется его вызов?

== 20 Разница между композицией и наследованием?

== 21 Что такое композиция в контексте JavaScript?

== 22 Что такое паттерн, или шаблон проектирования?

== 23 Типы паттернов?

== 24 Что такое GOF паттерны?

== 25 Что такое GRASP паттерны?


*/}


{/*//!          ====    TypeScript (вопросы по языку TypeScript)   ====

== 1 Что такое TypeScript?

== 2 Основные компоненты TypeScript?

== 3 Назовите особенности TypeScript?

== 4 Плюсы использования TypeScript?

== 5 Минусы использования TypeScript?

== 6 Типы в TypeScript?

== 7 Что такое декораторы?

== 8 Поддерживает ли TypeScript перегрузку функций?

== 9 Разница между типом (type) и интерфейсом (interface)?

== 10 Что такое JSX в TypeScript? Какие режимы JSX поддерживает TypeScript?

== 11 Что такое директивы с тремя наклонными чертами (Triple-Slash Directives), их типы?

== 12 Что такое внешние объявления переменных (ambient declaration) в TypeScript?

== 13 Разница между абстрактным классом (abstract class) и интерфейсом (interface)?

== 14 Какие элементы ООП поддерживаются в TypeScript?

== 15 Модификаторы доступа в TypeScript?

== 16 Разница между внутренним (Internal Module) и внешним модулями (External Module)?

== 17 Что такое декораторы в TypeScript?

== 18 Как TypeScript поддерживает необязательные и дефолтные параметры в функции?

== 19 Что такое перечисление (enum)?

== 20 Для чего в TypeScript используется NoImplicitAny?

== 21 Разница между типами “Объединение” (|) и “Пересечение” (&)?

== 22 Что такое общие типы (generic) в TypeScript?

== 23 Какие области видимости доступны в TypeScript?

== 24 Что такое .map файл, как и зачем его использовать?

== 25 Можно ли использовать TypeScript в серверной разработке?

== 26 Для чего в TypeScript используют ключевое слово declare?


*/}


{/*//!          ====    Testing (базовые вопросы по тестированию)   ====

== 1 Какие бывают виды тестирования?

== 2 Что такое Fake в unit тестировании?

== 3 Что такое Stub в unit тестировании?

== 4 Что такое Mock в unit тестировании?

== 5 Разница между Mock и Stub?

*/}


{/*//!          ====    Практические задачи (решения типовых задач)   ====

== 1 Функция проверки палиндрома?

== 2 Функция поиска самого короткого слова?

== 3 Функция создания инициалов?

== 4 Функция суммирования всех цифр числа?

== 5 Функция поиска минимального и максимального значений в массиве?

== 6 Функция создания набора дубликатов символов строки?

== 7 Функция возврата индексов заглавных букв строки?

== 8 Функция вывода чисел от 1 до n (n - передаваемый аргумент)

== 9 Функция возврата уникальных значений из нескольких массивов?

== 10 Функция форматирования цифр в телефонный номер?

== 11 Функция поиска гласных букв в строке?

== 12 Функция трансформации букв в заглавный регистр?

*/}






{/*//!          ====    Node.js (вопросы по платформе Node.js)   ====

Что такое Node.js?
Разница между Node.js и JavaScript?
Когда следует использовать Node.js?
Плюсы Node.js?
Что такое цикл событий (event loop)?
Разница между асинхронной и неблокирующей функциями?
Преимущества однопоточного веб-сервера по сравнению с многопоточным?
Что такое поток (stream)? Типы потоков в Node.js?
Разница между createReadStream и readFile?
Что такое REPL в Node.js?
Что такое Continuation-passing Style (CPS)?
Как избежать Callback Hell?
Что такое модуль Cluster?
Почему использование блокирующих, или синхронных операций является плохой практикой в Node.js?
Что такое npm?
Разница между module.exports и exports?
Почему в модулях переменные верхнего уровня не являются глобальными?
Что такое циклические зависимости модулей в Node?

*/}

{/*//!          ====    Vue.js (вопросы по фрэймворку Vue.js)   ====

Что такое Vue.js?
Перечислите особенности Vue.js?
Перечислите преимущества Vue.js?
Назовите хуки жизненного цикла компонента во Vue.js?
Опишите жизненный цикл компонента во Vue.js?
Что такое условные директивы (conditional directives)?
Разница между директивами v-show и v-if?
Что такое вычисляемые свойства?
Какие модификаторы событий предоставляет Vue.js?
Какие модификаторы кнопок предоставляет Vue.js?
Какие модификаторы кнопок мыши предоставляет Vue.js?
Что такое компонент?
Что такое пропсы? Типы пропсов?
Разница между локальной и глобальной регистрацией компонента?
Что такое миксины Vue.js?
Что такое Vue CLI?
Что такое Vuex?
Что общего у React и Vue.js?
Разница между React и Vue.js?
Разница между Angular и Vue.js?
Что такое SFC? Какие проблемы он решает?
Как реализована реактивность во Vue2 и Vue3?
Что такое Vue Router? Назовите его особенности?
Что такое вложенные роуты (Routes)?
Что такое фильтры? Как создать цепочку фильтров?
Перечислите варианты коммуникации компонентов во Vue.js?
Какие модификаторы поддерживаются в модели (v-model)?
Что такое плагины? Какие возможности дают плагины для Vue.js?
Что такое слот (<slot>) во Vue.js?
Какие хуки предоставляют директивы?
Что такое аргументы директивных хуков?
Что такое vue-loader?
Что такое рендер-функция (render function)? Преимущества рендер-функции?
Что такое динамические (<keep-alive>) компоненты?
Что такое асинхронные компоненты?

*/}

{/*//!          ====    Angular (вопросы по фрэймворку Angular)   ====

Что такое Angular?
Разница между AngularJS и Angular?
Методы жизненного цикла Angular компонента?
Разница между constructor и ngOnInit?
Что такое Data Binding в Angular?
Разница между AOT и JIT?
Что такое Change Detection, как работает механизм Change Detection?
Что такое ngZone?
Cтратегии обнаружения изменений в Angular?
Что такое декораторы в TypeScript?
Назовите плюсы использования Angular?
Назовите минусы использования Angular?
Что такое внедрение зависимостей в Angular?
Что такое директивы в Angular?
Для чего нужны директивы <ng-template>, <ng-container>, <ng-content>?
Что такое динамические компоненты в Angular?
Назовите последовательность действий для отображения динамического компонента?
Основные формы привязки данных в Angular?
Типы стратегий загрузки в Angular?
Что такое роутинг и как его создать в Angular?
Что такое интерполяция в Angular?
Жизненный цикл в Angular Router?
Разница между RouterModule.forRoot() и RouterModule.forChild()?
Когда нужно использовать ngrx/store?
Разница между умным и презентационным компонентами?
Разница между @ViewChild() и @ContentChild()?
Что такое template variable? Как ее использовать?
Что такое View Encapsulation?
Как можно хранить данные в Angular?
Когда нужно использовать стандартные (template driven), а когда реактивные (reactive) формы?
Как внедрить сервис в Angular приложение?
Как улучшить производительность Angular приложения?
Разница между компонентом и модулем в Angular?
Как защитит компонент активируемый через роутер?
Разницу между Promise и Observable в Angular?
Разница между declarations, providers и import в NgModule?
Что такое реактивное программирование? Как оно используется в Angular?
Лучшие практики безопасности в Angular?
Разница между BehaviorSubject и Observable?
Приведите хороший пример использования NgZone сервиса?
Как сделать компонент для показа сообщений об ошибках?
Как передать данные из дочернего компонента в родительский?
Разница между NgForm, FormGroup, и FormControl?
Что такое Shared модуль?
Почему импортировать сервис из SharedModule в lazy loaded модуль считается плохой практикой?
Разница между switchMap, concatMap и mergeMap?
Разница между BehaviorSubject, ReplaySubject и AsyncSubject?
Принцип работы ChangeDetectionStrategy.onPush?
Что такое пайп (pipe) в Angular? Разница между чистыми и нечистыми пайпами?
Назовите ключевые компоненты Angular?
Разница между компонентом и директивой?
Что такое HttpClient, перечислите его преимущества?
Что такое пользовательский элемент (Custom Element)? Как он работает?
Как трансформировать Angular-компоненты в пользовательские элементы?
Назовите преимущества AOT компиляции?
Преимущества использования сервис-воркеров в Angular приложении?
Что такое платформа в Angular?
Для чего используется связка ngFor и trackBy?

*/}





//!                              ========           ВОПРОСЫ С СОБЕСЕДОВАНИЙ       ========

{/*//!          ====    1   ====



    
*/}




{/*//!          ====    Вопросы к работодателю   ====

-  «Подскажите, данная вакансия открыта впервые или уже был специалист на этом месте?»

- Если был – «По каким причинам ушел предыдущий сотрудник?»

- "Буду ли Я работать один или в команде?"

- "По каким критериям будут оценивать мою работу? Как будет выстроена мотивация на предложенной позиции?"

- "Возможен ли карьерный рост на этой позиции?"



- «Каких результатов от меня ожидают в течение испытательного срока?»


*/}
